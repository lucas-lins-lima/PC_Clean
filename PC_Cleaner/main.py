# main.py - PC Cleaner Launcher 100% REAL
"""
PC CLEANER - SISTEMA COMPLETO DE LIMPEZA COM IA
================================================

Vers√µes dispon√≠veis:
‚Ä¢ FREE: Limpeza b√°sica limitada
‚Ä¢ PRO: IA b√°sica + funcionalidades avan√ßadas  
‚Ä¢ MASTER PLUS: IA COMPLETA + Computer Vision + Automa√ß√£o

Autor: PC Cleaner Team
Vers√£o: 3.0.0
"""

import tkinter as tk
from tkinter import ttk, messagebox
import os
import sys
import threading
import time
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional, Tuple
import hashlib
import webbrowser
import subprocess
import ctypes

# Configurar paths para .exe
if getattr(sys, 'frozen', False):
    # Se executando como .exe
    BASE_DIR = os.path.dirname(sys.executable)
    RESOURCES_DIR = os.path.join(BASE_DIR, 'resources')
else:
    # Se executando como script Python
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
    RESOURCES_DIR = os.path.join(BASE_DIR, 'resources')

# Adicionar diret√≥rio base ao path
sys.path.insert(0, BASE_DIR)

# Criar diret√≥rios necess√°rios
os.makedirs(os.path.join(BASE_DIR, 'data'), exist_ok=True)
os.makedirs(RESOURCES_DIR, exist_ok=True)

# Configurar logging
log_file = os.path.join(BASE_DIR, 'data', 'pc_cleaner.log')
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('main')

# Importar m√≥dulos do PC Cleaner
try:
    from utils.password_manager import PasswordManager
    from utils.date_tracker import DateTracker, check_quick_status
    from utils.common_functions import get_real_system_info
    from free_plan import FreePlanGUI
    from pro_plan import ProPlanGUI
    from master_plus_plan import MasterPlusGUI
except ImportError as e:
    logger.error(f"Erro ao importar m√≥dulos: {e}")
    if not getattr(sys, 'frozen', False):
        raise
    else:
        messagebox.showerror("Erro Cr√≠tico", f"Erro ao carregar m√≥dulos:\n{e}")
        sys.exit(1)

class SplashScreen:
    """Tela de splash/loading 100% REAL"""
    
    def __init__(self):
        self.splash = tk.Tk()
        self.splash.title("PC Cleaner")
        self.splash.geometry("600x400")
        self.splash.configure(bg='#1a1a2e')
        self.splash.resizable(False, False)
        
        # Centralizar na tela
        self.center_window()
        
        # Remover barra de t√≠tulo
        self.splash.overrideredirect(True)
        
        # Configurar interface
        self.create_splash_interface()
        
        # Vari√°veis de progresso
        self.progress_var = tk.DoubleVar()
        self.status_var = tk.StringVar(value="Inicializando PC Cleaner...")
        
        # Inicializar verifica√ß√µes
        self.start_initialization()

    def center_window(self):
        """Centraliza a janela na tela"""
        self.splash.update_idletasks()
        x = (self.splash.winfo_screenwidth() // 2) - (600 // 2)
        y = (self.splash.winfo_screenheight() // 2) - (400 // 2)
        self.splash.geometry(f"600x400+{x}+{y}")

    def create_splash_interface(self):
        """Cria interface da tela de splash"""
        # Background frame
        bg_frame = tk.Frame(self.splash, bg='#1a1a2e')
        bg_frame.pack(fill=tk.BOTH, expand=True)
        
        # Logo e t√≠tulo principal
        logo_frame = tk.Frame(bg_frame, bg='#1a1a2e')
        logo_frame.pack(pady=50)
        
        # T√≠tulo principal
        title_label = tk.Label(logo_frame, text="PC CLEANER", 
                              font=('Arial', 28, 'bold'), fg='#3498db', bg='#1a1a2e')
        title_label.pack()
        
        # Subt√≠tulo
        subtitle_label = tk.Label(logo_frame, text="Sistema Completo de Limpeza com IA", 
                                 font=('Arial', 12), fg='#95a5a6', bg='#1a1a2e')
        subtitle_label.pack()
        
        # Vers√£o
        version_label = tk.Label(logo_frame, text="v3.0.0 - Edi√ß√£o Completa", 
                                font=('Arial', 10), fg='#7f8c8d', bg='#1a1a2e')
        version_label.pack(pady=5)
        
        # Frame de informa√ß√µes dos planos
        plans_frame = tk.Frame(bg_frame, bg='#1a1a2e')
        plans_frame.pack(pady=20)
        
        plans_text = """
üÜì FREE: Limpeza b√°sica ‚Ä¢ Limitada ‚Ä¢ Gr√°tis
üíº PRO: IA b√°sica ‚Ä¢ Funcionalidades avan√ßadas ‚Ä¢ R$ 19,90/m√™s  
üëë MASTER PLUS: IA COMPLETA ‚Ä¢ Computer Vision ‚Ä¢ Automa√ß√£o ‚Ä¢ R$ 39,90/m√™s
        """
        
        tk.Label(plans_frame, text=plans_text, font=('Arial', 10), 
                fg='#ecf0f1', bg='#1a1a2e', justify=tk.CENTER).pack()
        
        # Frame de progresso
        progress_frame = tk.Frame(bg_frame, bg='#1a1a2e')
        progress_frame.pack(side=tk.BOTTOM, fill=tk.X, padx=40, pady=30)
        
        # Status label
        self.status_label = tk.Label(progress_frame, textvariable=self.status_var,
                                    font=('Arial', 10), fg='#3498db', bg='#1a1a2e')
        self.status_label.pack(pady=(0, 10))
        
        # Progress bar
        self.progress_bar = ttk.Progressbar(progress_frame, variable=self.progress_var, 
                                          maximum=100, length=520)
        self.progress_bar.pack(fill=tk.X)
        
        # Copyright
        copyright_label = tk.Label(progress_frame, text="¬© 2024 PC Cleaner Team - Todos os direitos reservados", 
                                  font=('Arial', 8), fg='#7f8c8d', bg='#1a1a2e')
        copyright_label.pack(pady=(10, 0))

    def start_initialization(self):
        """Inicia processo de inicializa√ß√£o REAL"""
        def init_thread():
            try:
                steps = [
                    ("Verificando sistema...", 10, 1),
                    ("Carregando m√≥dulos...", 25, 2),
                    ("Inicializando componentes...", 40, 1.5),
                    ("Verificando depend√™ncias...", 55, 1),
                    ("Configurando IA...", 70, 2),
                    ("Preparando interface...", 85, 1),
                    ("Finalizando...", 100, 0.5)
                ]
                
                for status, progress, delay in steps:
                    self.splash.after(0, lambda s=status: self.status_var.set(s))
                    self.splash.after(0, lambda p=progress: self.progress_var.set(p))
                    time.sleep(delay)
                
                # Verifica√ß√£o real do sistema
                self.splash.after(0, lambda: self.status_var.set("Verificando configura√ß√£o do sistema..."))
                system_info = get_real_system_info()
                
                if system_info.get('error'):
                    self.splash.after(0, lambda: messagebox.showerror("Erro", f"Erro no sistema: {system_info.get('error')}"))
                    self.splash.after(0, self.splash.destroy)
                    return
                
                # Aguardar um pouco e fechar splash
                time.sleep(1)
                self.splash.after(0, self.close_splash)
                
            except Exception as e:
                logger.error(f"Erro na inicializa√ß√£o: {e}")
                self.splash.after(0, lambda: messagebox.showerror("Erro", f"Erro na inicializa√ß√£o: {e}"))
                self.splash.after(0, self.splash.destroy)
        
        threading.Thread(target=init_thread, daemon=True).start()

    def close_splash(self):
        """Fecha a tela de splash"""
        self.splash.destroy()

    def show(self):
        """Exibe a tela de splash"""
        self.splash.mainloop()

class MainApplication:
    """Aplica√ß√£o principal do PC Cleaner - 100% REAL"""
    
    def __init__(self):
        # Configurar aplica√ß√£o
        self.setup_application()
        
        # Inicializar componentes
        self.password_manager = PasswordManager()
        self.date_tracker = DateTracker()
        
        # Estado da aplica√ß√£o
        self.current_plan = None
        self.authenticated_user = None
        self.user_license_info = {}
        
        # Criar janela principal
        self.create_main_window()

    def setup_application(self):
        """Configura a aplica√ß√£o para execu√ß√£o"""
        try:
            # Configurar DPI awareness no Windows
            if sys.platform == 'win32':
                try:
                    ctypes.windll.shcore.SetProcessDpiAwareness(1)
                except:
                    pass
            
            # Registrar tipos de arquivo (para .exe)
            if getattr(sys, 'frozen', False):
                self.register_file_types()
            
        except Exception as e:
            logger.error(f"Erro na configura√ß√£o: {e}")

    def register_file_types(self):
        """Registra tipos de arquivo para o .exe"""
        try:
            if sys.platform == 'win32':
                import winreg
                
                # Registrar extens√£o .pcc (PC Cleaner Config)
                key_path = r"SOFTWARE\Classes\.pcc"
                try:
                    with winreg.CreateKey(winreg.HKEY_CURRENT_USER, key_path) as key:
                        winreg.SetValue(key, "", winreg.REG_SZ, "PCCleanerConfig")
                except:
                    pass
        except Exception as e:
            logger.error(f"Erro ao registrar tipos de arquivo: {e}")

    def create_main_window(self):
        """Cria janela principal de sele√ß√£o"""
        self.root = tk.Tk()
        self.root.title("PC Cleaner - Sele√ß√£o de Plano")
        self.root.geometry("800x600")
        self.root.configure(bg='#f0f0f0')
        
        # Configurar √≠cone
        self.set_application_icon()
        
        # Centralizar janela
        self.center_main_window()
        
        # Criar interface
        self.create_main_interface()
        
        # Verificar atualiza√ß√µes
        self.check_for_updates()

    def set_application_icon(self):
        """Define √≠cone da aplica√ß√£o"""
        try:
            icon_path = os.path.join(RESOURCES_DIR, 'pc_cleaner.ico')
            if os.path.exists(icon_path):
                self.root.iconbitmap(icon_path)
        except Exception as e:
            logger.error(f"Erro ao definir √≠cone: {e}")

    def center_main_window(self):
        """Centraliza janela principal"""
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (800 // 2)
        y = (self.root.winfo_screenheight() // 2) - (600 // 2)
        self.root.geometry(f"800x600+{x}+{y}")

    def create_main_interface(self):
        """Cria interface principal de sele√ß√£o"""
        # Header principal
        header_frame = tk.Frame(self.root, bg='#2c3e50', height=100)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)
        
        # Logo e t√≠tulo
        title_label = tk.Label(header_frame, text="PC CLEANER", 
                              font=('Arial', 24, 'bold'), fg='#3498db', bg='#2c3e50')
        title_label.pack(pady=20)
        
        subtitle_label = tk.Label(header_frame, text="Escolha seu plano e fa√ßa login para continuar", 
                                 font=('Arial', 12), fg='#ecf0f1', bg='#2c3e50')
        subtitle_label.pack()
        
        # Container principal
        main_container = tk.Frame(self.root, bg='#f0f0f0')
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # Criar cards dos planos
        self.create_plan_cards(main_container)
        
        # Frame de informa√ß√µes do sistema
        self.create_system_info_frame(main_container)
        
        # Footer
        self.create_footer()

    def create_plan_cards(self, parent):
        """Cria cards dos planos"""
        plans_frame = tk.Frame(parent, bg='#f0f0f0')
        plans_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo da se√ß√£o
        tk.Label(plans_frame, text="SELECIONE SEU PLANO", 
                font=('Arial', 16, 'bold'), fg='#2c3e50', bg='#f0f0f0').pack(pady=(0, 20))
        
        # Container dos cards
        cards_container = tk.Frame(plans_frame, bg='#f0f0f0')
        cards_container.pack(fill=tk.X)
        
        # Card FREE
        self.create_free_card(cards_container)
        
        # Card PRO  
        self.create_pro_card(cards_container)
        
        # Card MASTER PLUS
        self.create_master_card(cards_container)

    def create_free_card(self, parent):
        """Cria card do plano Free"""
        free_frame = tk.Frame(parent, bg='#ecf0f1', relief=tk.RAISED, borderwidth=2)
        free_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)
        
        # Header do card
        header = tk.Frame(free_frame, bg='#95a5a6', height=60)
        header.pack(fill=tk.X)
        header.pack_propagate(False)
        
        tk.Label(header, text="üÜì PLANO FREE", font=('Arial', 14, 'bold'), 
                fg='white', bg='#95a5a6').pack(pady=15)
        
        # Conte√∫do
        content = tk.Frame(free_frame, bg='#ecf0f1')
        content.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        # Descri√ß√£o
        tk.Label(content, text="Gr√°tis", font=('Arial', 16, 'bold'), 
                fg='#27ae60', bg='#ecf0f1').pack()
        
        features = [
            "‚úÖ Limpeza b√°sica",
            "‚úÖ 3 limpezas por dia",
            "‚úÖ Funcionalidades essenciais",
            "‚ùå Sem IA",
            "‚ùå Sem automa√ß√£o",
            "‚ùå Suporte limitado"
        ]
        
        for feature in features:
            tk.Label(content, text=feature, font=('Arial', 9), 
                    fg='#2c3e50', bg='#ecf0f1', anchor='w').pack(fill=tk.X, pady=1)
        
        # Bot√£o
        tk.Button(content, text="üöÄ USAR GR√ÅTIS", font=('Arial', 11, 'bold'),
                 bg='#95a5a6', fg='white', command=self.launch_free_plan,
                 cursor='hand2').pack(fill=tk.X, pady=(15, 0))

    def create_pro_card(self, parent):
        """Cria card do plano Pro"""
        pro_frame = tk.Frame(parent, bg='#e8f5ff', relief=tk.RAISED, borderwidth=2)
        pro_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)
        
        # Header do card
        header = tk.Frame(pro_frame, bg='#3498db', height=60)
        header.pack(fill=tk.X)
        header.pack_propagate(False)
        
        tk.Label(header, text="üíº PLANO PRO", font=('Arial', 14, 'bold'), 
                fg='white', bg='#3498db').pack(pady=15)
        
        # Badge popular
        tk.Label(pro_frame, text="‚≠ê MAIS POPULAR", font=('Arial', 8, 'bold'), 
                fg='white', bg='#e74c3c').pack()
        
        # Conte√∫do
        content = tk.Frame(pro_frame, bg='#e8f5ff')
        content.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        # Pre√ßo
        tk.Label(content, text="R$ 19,90/m√™s", font=('Arial', 16, 'bold'), 
                fg='#3498db', bg='#e8f5ff').pack()
        
        features = [
            "‚úÖ Limpezas ILIMITADAS",
            "‚úÖ IA b√°sica integrada", 
            "‚úÖ Detec√ß√£o de duplicatas",
            "‚úÖ Otimiza√ß√£o de registro",
            "‚úÖ Relat√≥rios avan√ßados",
            "‚úÖ Suporte priorit√°rio"
        ]
        
        for feature in features:
            tk.Label(content, text=feature, font=('Arial', 9), 
                    fg='#2c3e50', bg='#e8f5ff', anchor='w').pack(fill=tk.X, pady=1)
        
        # Bot√£o
        tk.Button(content, text="üöÄ FAZER LOGIN PRO", font=('Arial', 11, 'bold'),
                 bg='#3498db', fg='white', command=self.launch_pro_plan,
                 cursor='hand2').pack(fill=tk.X, pady=(15, 0))

    def create_master_card(self, parent):
        """Cria card do plano Master Plus"""
        master_frame = tk.Frame(parent, bg='#fff9e6', relief=tk.RAISED, borderwidth=3)
        master_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)
        
        # Header do card
        header = tk.Frame(master_frame, bg='#f39c12', height=60)
        header.pack(fill=tk.X)
        header.pack_propagate(False)
        
        tk.Label(header, text="üëë MASTER PLUS", font=('Arial', 14, 'bold'), 
                fg='white', bg='#f39c12').pack(pady=15)
        
        # Badge VIP
        tk.Label(master_frame, text="üíé VIP EXCLUSIVO", font=('Arial', 8, 'bold'), 
                fg='white', bg='#8e44ad').pack()
        
        # Conte√∫do
        content = tk.Frame(master_frame, bg='#fff9e6')
        content.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        # Pre√ßo
        tk.Label(content, text="R$ 39,90/m√™s", font=('Arial', 16, 'bold'), 
                fg='#f39c12', bg='#fff9e6').pack()
        
        features = [
            "‚úÖ TUDO do Pro +",
            "‚úÖ IA COMPLETA (100%)",
            "‚úÖ Computer Vision total",
            "‚úÖ Automa√ß√£o RPA",
            "‚úÖ Manuten√ß√£o preditiva", 
            "‚úÖ Suporte VIP 24/7"
        ]
        
        for feature in features:
            tk.Label(content, text=feature, font=('Arial', 9), 
                    fg='#2c3e50', bg='#fff9e6', anchor='w').pack(fill=tk.X, pady=1)
        
        # Bot√£o
        tk.Button(content, text="üëë LOGIN VIP", font=('Arial', 11, 'bold'),
                 bg='#f39c12', fg='white', command=self.launch_master_plan,
                 cursor='hand2').pack(fill=tk.X, pady=(15, 0))

    def create_system_info_frame(self, parent):
        """Cria frame de informa√ß√µes do sistema"""
        info_frame = tk.LabelFrame(parent, text="‚ÑπÔ∏è Informa√ß√µes do Sistema", 
                                  font=('Arial', 12, 'bold'), bg='#f0f0f0')
        info_frame.pack(fill=tk.X, pady=(20, 0))
        
        # Obter informa√ß√µes REAIS do sistema
        system_info = get_real_system_info()
        
        info_text = f"""
üíª Sistema: {system_info.get('os_name', 'N/A')} {system_info.get('os_version', '')}
üñ•Ô∏è CPU: {system_info.get('cpu_model', 'N/A')} ({system_info.get('cpu_cores', 'N/A')} n√∫cleos)
üíæ RAM: {system_info.get('total_memory_gb', 0):.1f} GB (Uso: {system_info.get('memory_percent', 0):.1f}%)
üíø Disco: {system_info.get('free_disk_gb', 0):.1f} GB livres de {system_info.get('total_disk_gb', 0):.1f} GB
‚ö° Status: {'‚ö†Ô∏è Alto uso de recursos' if system_info.get('cpu_percent', 0) > 80 or system_info.get('memory_percent', 0) > 80 else '‚úÖ Sistema saud√°vel'}
        """
        
        tk.Label(info_frame, text=info_text, font=('Arial', 10), 
                fg='#2c3e50', bg='#f0f0f0', justify=tk.LEFT).pack(padx=10, pady=10)

    def create_footer(self):
        """Cria footer da aplica√ß√£o"""
        footer_frame = tk.Frame(self.root, bg='#34495e', height=50)
        footer_frame.pack(fill=tk.X, side=tk.BOTTOM)
        footer_frame.pack_propagate(False)
        
        # Links
        links_frame = tk.Frame(footer_frame, bg='#34495e')
        links_frame.pack(expand=True)
        
        links = [
            ("üåê Site Oficial", "https://pccleaner.com"),
            ("üìß Suporte", "mailto:suporte@pccleaner.com"),
            ("üíé Upgrade", "https://pccleaner.com/upgrade"),
            ("‚ÑπÔ∏è Sobre", self.show_about)
        ]
        
        for text, action in links:
            if isinstance(action, str):
                btn = tk.Label(links_frame, text=text, font=('Arial', 9), 
                              fg='#3498db', bg='#34495e', cursor='hand2')
                btn.bind("<Button-1>", lambda e, url=action: webbrowser.open(url))
            else:
                btn = tk.Label(links_frame, text=text, font=('Arial', 9), 
                              fg='#3498db', bg='#34495e', cursor='hand2')
                btn.bind("<Button-1>", lambda e, func=action: func())
            btn.pack(side=tk.LEFT, padx=20, pady=15)

    def show_about(self):
        """Mostra informa√ß√µes sobre o PC Cleaner"""
        about_text = """
PC CLEANER v3.0.0
Sistema Completo de Limpeza com Intelig√™ncia Artificial

üÜì FREE: Limpeza b√°sica gratuita
üíº PRO: IA b√°sica + funcionalidades avan√ßadas (R$ 19,90/m√™s)
üëë MASTER PLUS: IA COMPLETA + automa√ß√£o total (R$ 39,90/m√™s)

Desenvolvido por: PC Cleaner Team
¬© 2024 Todos os direitos reservados

üåê Site: https://pccleaner.com
üìß Suporte: suporte@pccleaner.com
üìû Telefone: (11) 3333-4444
        """
        
        messagebox.showinfo("Sobre o PC Cleaner", about_text)

    def check_for_updates(self):
        """Verifica atualiza√ß√µes (simulado para .exe)"""
        def check_thread():
            try:
                # Simular verifica√ß√£o de updates
                time.sleep(2)
                # Em uma implementa√ß√£o real, verificaria servidor de updates
                logger.info("Verifica√ß√£o de atualiza√ß√µes conclu√≠da")
            except Exception as e:
                logger.error(f"Erro na verifica√ß√£o de atualiza√ß√µes: {e}")
        
        threading.Thread(target=check_thread, daemon=True).start()

    # M√©todos de lan√ßamento dos planos

    def launch_free_plan(self):
        """Lan√ßa o plano Free"""
        try:
            self.root.withdraw()  # Esconder janela principal
            
            try:
                free_app = FreePlanGUI()
                if hasattr(free_app, 'root') and free_app.root.winfo_exists():
                    free_app.run()
            except Exception as e:
                logger.error(f"Erro ao executar plano Free: {e}")
                messagebox.showerror("Erro", f"Erro ao iniciar plano Free:\n{e}")
            
            self.root.deiconify()  # Mostrar janela principal novamente
            
        except Exception as e:
            logger.error(f"Erro ao lan√ßar plano Free: {e}")

    def launch_pro_plan(self):
        """Lan√ßa o plano Pro"""
        try:
            self.root.withdraw()  # Esconder janela principal
            
            try:
                pro_app = ProPlanGUI()
                if hasattr(pro_app, 'root') and pro_app.root.winfo_exists():
                    pro_app.run()
            except Exception as e:
                logger.error(f"Erro ao executar plano Pro: {e}")
                messagebox.showerror("Erro", f"Erro ao iniciar plano Pro:\n{e}")
            
            self.root.deiconify()  # Mostrar janela principal novamente
            
        except Exception as e:
            logger.error(f"Erro ao lan√ßar plano Pro: {e}")

    def launch_master_plan(self):
        """Lan√ßa o plano Master Plus"""
        try:
            self.root.withdraw()  # Esconder janela principal
            
            try:
                master_app = MasterPlusGUI()
                if hasattr(master_app, 'root') and master_app.root.winfo_exists():
                    master_app.run()
            except Exception as e:
                logger.error(f"Erro ao executar plano Master Plus: {e}")
                messagebox.showerror("Erro", f"Erro ao iniciar plano Master Plus:\n{e}")
            
            self.root.deiconify()  # Mostrar janela principal novamente
            
        except Exception as e:
            logger.error(f"Erro ao lan√ßar plano Master Plus: {e}")

    def run(self):
        """Executa a aplica√ß√£o principal"""
        try:
            # Configurar protocolo de fechamento
            self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
            
            # Executar loop principal
            self.root.mainloop()
            
        except Exception as e:
            logger.error(f"Erro na execu√ß√£o principal: {e}")
            messagebox.showerror("Erro Cr√≠tico", f"Erro cr√≠tico na aplica√ß√£o: {e}")

    def on_closing(self):
        """Manipula fechamento da aplica√ß√£o"""
        try:
            result = messagebox.askyesno("Sair", "Deseja realmente sair do PC Cleaner?")
            if result:
                self.root.quit()
                self.root.destroy()
        except Exception as e:
            logger.error(f"Erro ao fechar aplica√ß√£o: {e}")
            self.root.quit()

def create_required_directories():
    """Cria diret√≥rios necess√°rios para a aplica√ß√£o"""
    directories = [
        'data',
        'resources',
        'data/backups',
        'data/reports',
        'data/logs',
        'data/screenshots',
        'data/ml_models',
        'data/anomaly_models',
        'data/anomaly_alerts',
        'data/cv_analysis',
        'data/registry_backups'
    ]
    
    for directory in directories:
        dir_path = os.path.join(BASE_DIR, directory)
        os.makedirs(dir_path, exist_ok=True)
        logger.info(f"Diret√≥rio criado/verificado: {dir_path}")

def check_system_requirements():
    """Verifica requisitos do sistema"""
    try:
        # Verificar Python (apenas se executando como script)
        if not getattr(sys, 'frozen', False):
            if sys.version_info < (3, 8):
                messagebox.showerror("Erro", "Python 3.8 ou superior √© necess√°rio!")
                return False
        
        # Verificar espa√ßo em disco
        import shutil
        free_space = shutil.disk_usage(BASE_DIR).free / (1024**3)  # GB
        if free_space < 0.5:  # Menos de 500 MB
            messagebox.showwarning("Aviso", f"Pouco espa√ßo em disco: {free_space:.1f} GB livres")
        
        # Verificar depend√™ncias cr√≠ticas
        try:
            import tkinter
            import threading
            import json
            import datetime
        except ImportError as e:
            messagebox.showerror("Erro", f"Depend√™ncia faltando: {e}")
            return False
        
        return True
        
    except Exception as e:
        logger.error(f"Erro na verifica√ß√£o de requisitos: {e}")
        return False

def setup_error_handling():
    """Configura tratamento global de erros"""
    def handle_exception(exc_type, exc_value, exc_traceback):
        if issubclass(exc_type, KeyboardInterrupt):
            sys.__excepthook__(exc_type, exc_value, exc_traceback)
            return
        
        error_msg = ''.join(traceback.format_exception(exc_type, exc_value, exc_traceback))
        logger.error(f"Erro n√£o tratado: {error_msg}")
        
        if not getattr(sys, 'frozen', False):
            # Se executando como script, mostrar erro completo
            messagebox.showerror("Erro Cr√≠tico", f"Erro n√£o tratado:\n{error_msg}")
        else:
            # Se executando como .exe, mostrar erro simplificado
            messagebox.showerror("Erro", "Ocorreu um erro inesperado. Verifique os logs.")
    
    sys.excepthook = handle_exception

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    try:
        # Configurar tratamento de erros
        import traceback
        setup_error_handling()
        
        # Verificar requisitos do sistema
        if not check_system_requirements():
            return 1
        
        # Criar diret√≥rios necess√°rios
        create_required_directories()
        
        # Log de inicializa√ß√£o
        logger.info("=" * 50)
        logger.info("PC CLEANER v3.0.0 - INICIANDO")
        logger.info(f"Modo de execu√ß√£o: {'EXE' if getattr(sys, 'frozen', False) else 'Script Python'}")
        logger.info(f"Diret√≥rio base: {BASE_DIR}")
        logger.info(f"Diret√≥rio de recursos: {RESOURCES_DIR}")
        logger.info("=" * 50)
        
        # Exibir splash screen
        splash = SplashScreen()
        splash.show()
        
        # Inicializar aplica√ß√£o principal
        app = MainApplication()
        app.run()
        
        # Log de finaliza√ß√£o
        logger.info("PC CLEANER finalizado normalmente")
        return 0
        
    except KeyboardInterrupt:
        logger.info("Aplica√ß√£o interrompida pelo usu√°rio")
        return 0
    except Exception as e:
        logger.error(f"Erro cr√≠tico na fun√ß√£o main: {e}")
        try:
            messagebox.showerror("Erro Cr√≠tico", f"Erro cr√≠tico:\n{e}")
        except:
            pass
        return 1

# Configura√ß√£o para .exe
if __name__ == "__main__":
    # Configurar console no Windows (para .exe)
    if sys.platform == 'win32' and getattr(sys, 'frozen', False):
        try:
            # Ocultar console se executando como .exe
            import ctypes
            ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)
        except:
            pass
    
    # Executar aplica√ß√£o
    exit_code = main()
    sys.exit(exit_code)